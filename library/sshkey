#!/usr/bin/python
from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
author: Uli Martens
module: sshkey
short_description: Create ssh keys
description:
  - "This module creates ssh keys."
version_added: "1.9"
options:
  dest:
    description:
    - The ssh key file to create or remove
    required: true
  pub_mode:
    description:
    - The file mode of the public key of this key
    required: false
  state:
    choices: [ "absent", "present" ]
    description:
    - If the ssh key should be present or absent - default present
    required: false
  others:
    description:
    - all arguments accepted by the M(file) module also work here
    required: false
notes:
  - This module does not yet allow explicit setting of key type, bit sizes, key comment etc.
'''

import os

from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
       argument_spec = dict(
           dest=dict(type='str', required=True),
           pub_mode=dict(type='str', required=False),
           state=dict(type='str', choices=['absent', 'present'], default='present'),
       ),
       add_file_common_args=True,
       supports_check_mode=True,
    )

    changed = False
    sshkeygen = module.get_bin_path('ssh-keygen', required=True)

    dest = module.params['dest']
    pubkey = None

    if module.params['state'] == 'present':
        if not os.path.exists(dest):
            if module.check_mode:
                module.exit_json(changed=True,msg='can not create key in check mode')
            module.run_command('%s -f %s -N ""'%(sshkeygen, dest))
            changed=True

        file_args = module.load_file_common_arguments(module.params)

        pub_args = file_args.copy()
        pub_args['path'] = pub_args['path'] + '.pub'
        if module.params['pub_mode'] is not None:
            pub_args['mode'] = module.params['pub_mode']

        changed = module.set_fs_attributes_if_different(file_args, changed)

        changed = module.set_fs_attributes_if_different(pub_args, changed)

        with open(pub_args['path'], 'r') as f:
            pubkey = f.read()


    if module.params['state'] == 'absent':
        if os.path.exists(dest):
            if not module.check_mode:
                os.remove(dest)
            changed = True

    module.exit_json(changed=changed,pubkey=pubkey)


if __name__ == '__main__':
    main()
